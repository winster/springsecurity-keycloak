# Simple configuration for an HTTP proxy listening on port 80 on all
# interfaces and forwarding requests to a single backend "servers" with a
# single server "server1" listening on 127.0.0.1:8000
global
daemon
maxconn 256
log stdout format raw local0

defaults
#mode tcp
mode http
timeout connect 10000ms
timeout client 100000ms
timeout server 100000ms
log global

listen http-in
bind *:8888 ssl crt /etc/ssl/certs/haproxy.pem verify optional ca-file /etc/ssl/certs/rootCA.crt
http-request set-header SSL_CLIENT_CERT %[ssl_c_der,base64]
http-request deny if { path_end /auth } !{ ssl_c_used }
#redirect scheme https code 301 if !{ ssl_fc }
server server1 host.docker.internal:8443 ssl verify none


#frontend https-switch
#    bind *:8888
#    tcp-request inspect-delay 5s
#    tcp-request content accept if { req_ssl_hello_type 1 }
#    acl auth_request always_true
#    use_backend recir_clientcertenabled if auth_request
#    default_backend recir_default

#backend recir_clientcertenabled
#    server loopback-for-tls abns@haproxy-clientcert send-proxy-v2
#backend recir_default
#    server loopback-for-tls abns@haproxy-default send-proxy-v2

#frontend https-cert-required
#    bind abns@haproxy-clientcert accept-proxy ssl crt /etc/ssl/certs/haproxy.pem ca-file /etc/ssl/certs/rootCA.crt verify required
# HSTS (15768000 seconds = 6 months)
#    http-request set-header SSL_CLIENT_CERT %[ssl_c_der,base64]
#    http-response set-header Strict-Transport-Security max-age=15768000
#    mode http
#    default_backend nodes-https

#frontend https-default
#    bind abns@haproxy-default ssl accept-proxy crt /etc/ssl/certs/haproxy.pem
# HSTS (15768000 seconds = 6 months)
#    http-response set-header Strict-Transport-Security max-age=15768000
#    mode http
#    default_backend nodes-https

#backend nodes-https
#    mode http
#    server server1 host.docker.internal:8443 ssl verify none
